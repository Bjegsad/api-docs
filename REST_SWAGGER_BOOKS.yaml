openapi: 3.0.3
info:
  title: Library Management API
  version: 1.0.0
description: API for management books and authors in library
paths:
  /books:
    get:
      summary: Получение списка всех книг с деталями
      parameters:
        - name: genre
          in: query
          required: false
          description: Фильтр по жанру
          example: Поэма
          schema:
            type: string
        - name: pageSize 
          in: query
          required: true
          description: Размер страницы
          example: 20
          schema: 
            type: integer
        - name: pageNumber 
          in: query
          required: true
          description: Номер страницы
          example: 1
          schema: 
            type: integer
      tags:
        - Books
      responses:
       "200":
          description: 200 OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    post:
      summary: Добавление новой книги
      tags:
        - Books
      requestBody:
        description: Добавление новой книги
        required: true
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
      responses:
       "200":
          description: 200 OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/{bookId}:
    get:
      summary: Получение информации о книге по её ID
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            example: 123
      tags:
        - Books
      responses:
       "200":
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
    put:
      summary: Редактирование существующей книги
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            example: 123
      requestBody:
        description: Редактирование существующей книги
        required: true
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
      responses:
       "200":
          description: 200 OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    delete:
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            example: 123
      tags:
        - Books
      responses:
       "200":
          description: DELETED
  /authors:
    get:
      summary: Получение списка всех авторов с деталями
      tags:
        - Authors
      responses:
        "200":
          description: 200 OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    post:
      summary: Добавление нового автора
      tags:
        - Authors
      requestBody:
        description: Добавление нового автора
        required: true
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
      responses:
       "200":
          description: 200 OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"             
  /authors/{authorId}:
    get:
      summary: Получение информации о авторе по его ID
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
            example: 456
      tags:
        - Authors
      responses:
       "200":
          description: 200 OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
    put:
      summary: Редактирование существующего автора
      tags:
        - Authors
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
            example: 123
      requestBody:
        description: Редактирование существующего автора
        required: true
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
      responses:
       "200":
          description: 200 OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    delete:
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
            example: 123
      tags:
        - Authors
      responses:
       "200":
          description: DELETED
components:
  schemas:
    Book:
      type: object
      required:
        - id
        - name
        - genre
        - creationDate
        - authorId
      properties:
        id:
          type: string
          description: id книги
          nullable: false
          example: 123
        name:
          type: string
          description: Название книги
          maxLength: 2500
          nullable: false
          example: Горе от ума
        genre:
          type: string
          description: Жанр
          maxLength: 255
          example: Роман
          nullable: false
        creationDate:
          type: string
          format: date
          nullable: false
          description: Дата создания
        authorId:
          type: string
          description: id автора
          nullable: false
          example: 456
    Author:
      type: object
      required:
        - id
        - firstName
        - lastName
        - birthday
      properties:
        id:
          type: string
          nullable: false
          description: id автора
          readOnly: true
        firstName:
          type: string
          nullable: false
          description: Имя автора
          example: Петр
          maxLength: 100
        lastName:
          type: string
          nullable: false
          description: Фамилия автора
          example: Петров
          maxLength: 100
        birthday:
          type: string
          format: date
          description: Дата рождения автора
          nullable: false
        countBooks:
          type: integer
          description: Количество книг, написанных автором
          nullable: false
          example: 5